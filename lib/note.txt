{
    "一": {
        "strokes": 1,
        "grade": 1,
        "freq": 2,
        "jlpt_old": 4,
        "jlpt_new": 5,
        "meanings": ["One","One Radical (no.1)"],
        "readings_on": ["いち","いつ"],
        "readings_kun": ["ひと-","ひと.つ"],
        "wk_level": 1,
        "wk_meanings": ["One"],
        "wk_readings_on": ["いち","いつ"],
        "wk_readings_kun": ["!ひと"],
        "wk_radicals": ["Ground"]
    },
}

-- kanji struct

import 'dart:math';

enum AnswerQuality { CORRECT, GOOD, INCORRECT }

class ReviewCard {
  static const minimumEF = 1.3;
  int interval = 1;
  final String readings_on;
  final String readings_kun;
  final String meanings;
  int repetition = 0;
  double easeFactor = 2.5;
  DateTime? lastReviewed;
  DateTime? nextReviewDate;

  ReviewCard({required this.question, required this.answer});

  void review(AnswerQuality quality) {
    updateSM2(quality);
    lastReviewed = DateTime.now();
    calculateNextReviewDate();
  }

  void updateSM2(AnswerQuality quality) {
    if (quality == AnswerQuality.INCORRECT) {
      repetition = 0;
      interval = 1;
    } else {
      repetition += 1;
      interval = calculateInterval(repetition, easeFactor);
      easeFactor = easeFactor + (0.1 - (minimumEF - quality.index) * (0.08 + (minimumEF - quality.index) * 0.02));
      easeFactor = max(easeFactor, minimumEF); // Ensure minimum ease factor
    }
  }
  int calculateInterval(int repCount, double ef) {
    if (repCount <= 1) {
      return 1;
    } else if (repCount == 2) {
      return 6;
    } else {
      return (interval * ef).round();
    }
  }

  void calculateNextReviewDate() {
    if (lastReviewed == null) {
      // Handle initial case where there's no last reviewed date
      nextReviewDate = DateTime.now();
    } else {
      nextReviewDate = lastReviewed!.add(Duration(days: interval));
    }
  }
}

card struct - so far


import 'package:hanja_learning/services/reviewcardservice.dart';

import 'model/card.dart';
import 'objectbox.g.dart';

class ObjectBox{

  late final Store store;
  late final Box<ReviewCard> reviewBox;

  ObjectBox._create(this.store){
    reviewBox = Box<ReviewCard>(store);

    if(reviewBox.isEmpty()){
      _putReviewData();
    }
  }

  void _putReviewData() async{

    String filepath = 'lib/data/Kanjidata.json';
    List<ReviewCard> storedKanji = await setupAndStoreKanji(filepath);
    reviewBox.putMany(storedKanji);
  }

}